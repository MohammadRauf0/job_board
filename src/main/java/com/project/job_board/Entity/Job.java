package com.project.job_board.Entity;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

// Data, AllArgsConstructors, and NoArgsConstructor take care of constructors, getters, and setters
@Data
@AllArgsConstructor
@NoArgsConstructor

// the annotation below is responsible for letting Spring Boot know that this is
// an entity
@Entity

// the annotation below handles the name of the data table in the database
// IS OPTIONAL
@Table(name = "jobTable")
public class Job {
  // Id annotation below is used to specify the primary key attribute of an
  // entity
  // GeneratedValue Specifies that the 'id' field is a primary key with values
  // generated by the
  // database using an identity column.
  // Column annotation below maps the 'id' field to a database column named 'id'.
  // IS OPTIONAL
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id")
  Long id;

  String title, description, location, requirements, responsibilities;

  // the annotation below signifies a one-to-many relationship with the
  // 'applications' field
  // in the Application class. 'mappedBy' indicates the field in the Application
  // class
  // that owns the relationship.
  // 'cascade' specifies that operations on the 'applications' field should be
  // cascaded
  // to the associated entities (applications). 'orphanRemoval' ensures that
  // orphaned
  // (unreferenced) applications are removed from the database.
  @OneToMany(mappedBy = "job", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonIgnore
  List<Application> applications;

  // the annotation below signifies a many-to-one relationship with the 'employer'
  // field
  // in the Employer class. 'JoinColumn' specifies the name of the foreign key
  // column
  // in the database that references the 'id' field in the Employer class.
  @ManyToOne
  @JoinColumn(name = "employerId")
  Employer employer;

  // a method to add an application to the list of applications for this job
  public void addApplication(Application application) {
    this.applications.add(application);
  }
}
